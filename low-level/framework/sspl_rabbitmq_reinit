#!/usr/bin/env python
"""
Setup rabbitmq for use by sspl_ll on EES systems

This script uses /etc/sspl.conf as the source of the parameters.

Usage:
    ./sspl_rabbitmq_reinit <product>
"""
import subprocess
import ConfigParser

RABBITMQCTL = '/usr/sbin/rabbitmqctl'
SSPL_CONF = '/etc/sspl.conf'
SECTION="RABBITMQEGRESSPROCESSOR"


def main():
    """ Main line for this program. """
    config = ConfigParser.SafeConfigParser()
    config.read([SSPL_CONF])

    virtual_host = config.get(
        section=SECTION,
        option='virtual_host'
        )
    username = config.get(
        section=SECTION,
        option='username'
        )
    password = config.get(
        section=SECTION,
        option='password'
        )

    _create_vhost_if_necessary(virtual_host)
    _create_user_if_necessary(username, password, virtual_host)


def _create_vhost_if_necessary(virtual_host):
    """ Creates the specified vhost (if necessary).

    No action will occur if the vhost already exists.

    @type virtual_host:           string
    @param virtual_host:          The vhost to create.
    """
    vhosts = subprocess.check_output(
        [RABBITMQCTL, 'list_vhosts']
        ).split('\n')
    assert vhosts[0] == 'Listing vhosts ...'
    assert vhosts[-2] == '...done.'
    assert vhosts[-1] == ''
    for vhost in vhosts[1:-1]:
        if vhost == virtual_host:
            return
    subprocess.check_call([RABBITMQCTL, 'add_vhost', virtual_host])


def _create_user_if_necessary(username, password, virtual_host):
    """ Create the rabbitmq user (if necessary).

    The user is created (if it doesn't exist) and then set with .* permissions
    for conf,write,read on the specified virtual_host.

    The permissions will be set regardless of whether or not the user already exists.

    The password will only be set if this is a new user.

    Note: To delete the user, from bash, run::
        rabbitmqctl delete_user <username>

    @type username:               string
    @param username:              The user to create.
    @type password:               string
    @param passowrd:              The password for the specified user.  Will
                                  only be set if this is a new user.
    @type virtual_host:           string
    @param virtual_host:          The vhost on which the permissions will be
                                  set.
    """
    users = subprocess.check_output(
        [RABBITMQCTL, 'list_users']
        ).split('\n')
    assert users[0] == 'Listing users ...'
    assert users[-2] == '...done.'
    assert users[-1] == ''
    found_user = False
    for userspec in users[1:-1]:
        user = userspec.split()[0]
        if user == username:
            found_user = True
            break
    if not found_user:
        subprocess.check_call([RABBITMQCTL, 'add_user', username, password])
    subprocess.check_call(
        [
            RABBITMQCTL, 'set_permissions',
            '-p', virtual_host,
            username, '.*', '.*', '.*'
        ])
    subprocess.check_call(
        [RABBITMQCTL, 'set_user_tags', username, 'administrator']
        )


if __name__ == '__main__':
    main()
