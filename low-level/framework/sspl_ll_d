#!/usr/bin/python2.7
# -*- coding: utf-8 -*-

"""
 ****************************************************************************
 Filename:          sspl_ll_d
 Description:       Entry point for the sspl-ll daemon service
 Creation Date:     01/14/2015
 Author:            Jake Abernathy

 Do NOT modify or remove this copyright and confidentiality notice!
 Copyright (c) 2001 - $Date: 2015/01/14 $ Seagate Technology, LLC.
 The code contained herein is CONFIDENTIAL to Seagate Technology, LLC.
 Portions are also trade secret. Any use, duplication, derivation, distribution
 or disclosure of this code, for any reason, not expressly authorized is
 prohibited. All other rights are expressly reserved by Seagate Technology, LLC.
 ****************************************************************************
"""

from systemd.daemon import notify

import logging
import daemon
import signal
import getopt
import Queue
import fcntl
import time
import sys
import os

# Add the top level directories
parentdir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
os.sys.path.insert(0,parentdir)

from zope.component import getGlobalSiteManager
from zope.interface import implementedBy

from threading import Thread

from utils.config_reader import ConfigReader
from utils.service_logging import init_logging
from utils.service_logging import logger

# Modules for handling RabbitMQ messages and manipulating internal threads
from rabbitmq.rabbitmq_egress_processor import RabbitMQegressProcessor
from rabbitmq.rabbitmq_ingress_processor import RabbitMQingressProcessor
from rabbitmq.logging_processor import LoggingProcessor
from rabbitmq.thread_controller import ThreadController

# Modules for handling specific JSON messages
from message_handlers.node_controller_msg_handler import NodeControllerMsgHandler
from message_handlers.node_data_msg_handler import NodeDataMsgHandler
from message_handlers.disk_msg_handler import DiskMsgHandler
from message_handlers.logging_msg_handler import LoggingMsgHandler
from message_handlers.service_msg_handler import ServiceMsgHandler

# Message to send to HAlon upon critical thread errors
from json_msgs.messages.actuators.thread_controller import ThreadControllerMsg


# Section and key in config file for bootstrap
SSPL_SETTING    = 'SSPL-LL_SETTING'
CORE_PROCESSORS = 'core_processors'
MSG_HANDLERS    = 'message_handlers'
SENSORS         = 'sensors'
ACTUATORS       = 'actuators'

# Section containing information about the system we're running on
SYS_INFORMATION = 'SYSTEM_INFORMATION'
OPER_SYSTEM     = 'operating_system'

# Instantiate the internal ThreadController. Global so the shutdown callback
#  method can use it to properly halt all running threads.
threadController = ThreadController()

def main(conf_reader):
    """The main bootstrap for sspl"""    
    logger.info("sspl-ll Bootstrap: Obtaining list of modules from config file")

    # Create a map of references to all the module's message queues.  Each module
    #  is passed this mapping so that it can send messages to other modules.
    msgQlist = {}

    # Create a mapping of all the instantiated modules to their names
    sspl_threaded_modules = {}

    # Use reflection to instantiate the classes based upon its class name in config file
    core_processors = conf_reader._get_value_list(SSPL_SETTING,
                                                  CORE_PROCESSORS)
    logger.info("sspl-ll Bootstrap: core processors to load: %s" % core_processors)
    for core_processor in core_processors:
        klass = globals()[core_processor]

        # Create mappings of modules and their message queues
        sspl_threaded_modules[klass.name()] = klass()
        msgQlist[klass.name()] = Queue.Queue()

    message_handlers = conf_reader._get_value_list(SSPL_SETTING,
                                                   MSG_HANDLERS)
    logger.info("sspl-ll Bootstrap: message handlers to load: %s" % message_handlers)
    for message_handler in message_handlers:
        klass = globals()[message_handler]

        # Create mappings of modules and their message queues
        sspl_threaded_modules[klass.name()] = klass()
        msgQlist[klass.name()] = Queue.Queue()

    # Instantiate the sensors and actuators
    sspl_threaded_modules, msgQlist = _sensors_actuators_factory(
                                            sspl_threaded_modules, msgQlist)

    # Add the ThreadConroller automatically
    msgQlist[ThreadController.name()] = Queue.Queue()

    try:
        # Loop through the list of instanced modules and start them on threads
        for name, curr_module in sspl_threaded_modules.iteritems():
            logger.info("Starting %s" % curr_module.name())
            thread = Thread(target=_run_thread_capture_errors,
                            args=(curr_module, sspl_threaded_modules, msgQlist, conf_reader))
            thread.start()

        # Start the ThreadController module with the list of threads
        logger.info("Starting %s" % ThreadController.name())

        # Initialize the thread controller with the list of references to all modules
        controller_thread = Thread(target=_run_thread_capture_errors,
                            args=(threadController, sspl_threaded_modules, msgQlist, conf_reader))
        threadController.initialize_thread_list(sspl_threaded_modules)
        controller_thread.start()

        startup_msg = "SSPL-LL service has started successfully"
        jsonMsg   = ThreadControllerMsg(threadController.name(), startup_msg).getJson()
        threadController._write_internal_msgQ(RabbitMQegressProcessor.name(), jsonMsg)

        # Let systemd know that we've started up successfully and ready for it to monitor sspl-ll
        notify("READY=1")

        # Block main thread until thread controller has been halted
        controller_thread.join()

    except Exception as ex:
        logger.exception(ex)


# TODO: Create a factory class instead of a method
def _sensors_actuators_factory(sspl_threaded_modules, msgQlist):
    """Loops thru list of sensors/actuators and instantiate"""

    # The Zope Global Site Manager containing objects that implement the desired interfaces
    gsm = getGlobalSiteManager()

    # Read in operating system value from configuration file
    operating_system = conf_reader._get_value(SYS_INFORMATION, OPER_SYSTEM)
    logger.info("sspl-ll Bootstrap: operating system: %s" % operating_system)

    # Read in list of sensors
    sensors = conf_reader._get_value_list(SSPL_SETTING, SENSORS)
    logger.info("sspl-ll Bootstrap: sensors to load: %s" % sensors)

    # Read in list of actuators
    actuators = conf_reader._get_value_list(SSPL_SETTING, ACTUATORS)
    logger.info("sspl-ll Bootstrap: actuators to load: %s" % actuators)

    # Import in the proper classes based upon values from config file
    if operating_system == "centos7":
        from actuators.impl.centos_7.systemd_service import SystemdService as Service
        from actuators.impl.centos_7.systemd_login import SystemdLogin as Login
        from sensors.impl.centos_7.drive_manager import DriveManager as DriveManager
        from sensors.impl.centos_7.systemd_watchdog import SystemdWatchdog as ServiceWatchdog
        from sensors.impl.centos_7.hpi_monitor import HPIMonitor as HPIMonitor

    elif operating_system in ["osX", "osx"]:
        from actuators.impl.os_x.xinitd_service import XinitdService as Service
        from actuators.impl.os_x.xinitd_login import XinitdLogin as Login
        from sensors.impl.os_x.drive_manager import DriveManager as DriveManager
        from sensors.impl.os_x.xinitd_watchdog import XinitdWatchdog as ServiceWatchdog
        from sensors.impl.os_x.hpi_monitor import HPIMonitor as HPIMonitor

    else:
        raise Exception("Operating System not supported")

    # Import in generic sensors/actuators which work on all platforms
    from actuators.impl.generic.raritan_pdu import RaritanPDU
    from actuators.impl.generic.raid import RAIDactuator
    from actuators.impl.generic.ipmi import IPMI
    from actuators.impl.generic.wbcli_reset_drive import WbcliResetDrive
    from actuators.impl.generic.hdparm import Hdparm

    from sensors.impl.generic.raid import RAIDsensor
    from sensors.impl.generic.node_data import NodeData as NodeData
    from sensors.impl.generic.SMR_drive_data import SMRdriveData

    # Loop through the list of sensors/actuators and instantiate appropriately
    #  based upon whether or not it is threaded
    modules = sensors + actuators
    for module in modules:
        # Instantiate the class using reflection on the module's name; must match class name
        klass = locals()[module]

        # Look at module's configuration section and determine if it's threaded
        threaded = 'True'
        try:
            threaded = conf_reader._get_value(klass.name().upper(), 'threaded')
        except Exception as e:
            threaded = 'False'  # Wasn't present so default to False

        logger.info("Processing: %s, threaded: %s, Using Class: %s"
                        % (module, threaded, klass.name()))

        # If it's threaded then add it to the list which will be handled by the ThreadController
        if threaded in ['True', 'true']:
            sspl_threaded_modules[klass.name()] = klass()
            msgQlist[klass.name()] = Queue.Queue()
        else:
            # It's a static non-threaded object, register it with the Zope global site manager
            interface_impl = list(implementedBy(klass))[0]  # Assumes single inheritance only
            logger.info("Interface implemented: %s" % interface_impl.__name__)

            gsm.registerUtility(klass, interface_impl)

    return (sspl_threaded_modules, msgQlist)


def _run_thread_capture_errors(curr_module, sspl_threaded_modules, msgQlist, conf_reader):
    """Run the given thread and log any errors that happen on it.
    Will stop all sspl_threaded_modules if one of them fails."""
    try:
        # Each module is passed a reference list to message queues so it can transmit
        #  internal messages to other modules as desired
        curr_module.initialize(conf_reader, msgQlist)
        curr_module.start()

    except Exception as ex:
        # Populate an actuator response message and transmit back to HAlon
        error_msg = "SSPL-LL encountered an error, terminating service Error: " + \
                    + e + ", Exception: " + logger.exception()
        jsonMsg   = ThreadControllerMsg(curr_module.name(), error_msg).getJson()
        curr_module._write_internal_msgQ(RabbitMQegressProcessor.name(), jsonMsg)

        # Shut it down, error is non-recoverable
        for name, other_module in sspl_threaded_modules.iteritems():
            if other_module is not curr_module:
                other_module.shutdown()


def shutdown_handler(signum=None, stackframe=None):
    """Handler called when shutting down"""
    logger.info("sspl-ll is shutting down")

    shutdown_msg = "SSPL-LL is shutting down"
    jsonMsg   = ThreadControllerMsg(threadController.name(), shutdown_msg).getJson()
    threadController._write_internal_msgQ(RabbitMQegressProcessor.name(), jsonMsg)

    # Wait for the RabbitMQegressProcessor to finish processing
    # any messages which it may have in its queue
    while threadController.check_RabbitMQegressProcessor_is_running() is True:
        timer.sleep(2)

    # Now call the shutdown methods for all modules to gracefully halt
    threadController.shutdown_all_modules()

    # Halt the thread controller module last for a clean system shutdown
    threadController.shutdown()

    # Let systemd know that we've stopped successfully
    notify("STOPPING=1")


def print_usage():
    """Display the syntax usage for this script"""
    print """sspl_ll_d -c <path_to_conf_file>
    -h:    Display this help
    -c:    Configuration settings for sspl_ll_d service"""


if __name__ == "__main__":
    # Retrieve configuration file for sspl-ll service
    try:
        opts = getopt.getopt(sys.argv[1:], "hc:", ["help", "config="])

    except getopt.GetoptError as err:
        print_usage()
        sys.exit(os.EX_USAGE)

    if len(opts[0]) < 1:
        print_usage()
        sys.exit(os.EX_USAGE)

    for opt, arg in opts[0]:
        if opt == "-c" or opt == "--config":
            path_to_conf_file = arg
        else:
            print_usage()
            sys.exit(os.EX_USAGE)

    # Validate configuration file for required valid values
    try:
        conf_reader = ConfigReader(path_to_conf_file)

    except (IOError, ConfigReader.Error) as err:
        # We don't have logger yet, need to find log_level from conf file first
        print "[ Error ] when validating the configuration file %s :" % \
            path_to_conf_file
        print err
        print "Exiting ..."
        exit(os.EX_USAGE)

    # Initialize logging
    try:
        init_logging("SSPL-LL", "DEBUG")

    except Exception as err:
        # We don't have logger since it threw an exception, use generic 'print'
        print "[ Error ] when initializing logging :"
        print err
        print "Exiting ..."
        exit(os.EX_USAGE)

    try:
        # Create a PID file for systemd
        path = "/var/run/sspl_ll/sspl_ll_d.pid"
        pidfile = open(path, "a+")
        try:
            fcntl.flock(pidfile.fileno(), fcntl.LOCK_EX | fcntl.LOCK_NB)
        except IOError:
            raise SystemExit("Already running according to " + path)
        pidfile.seek(0)
        pidfile.truncate()
        pidfile.write(str(os.getpid()))
        pidfile.flush()
        pidfile.seek(0)

        # Create the daemon context
        context = daemon.DaemonContext(pidfile=pidfile)

        # Configure a shutdown handler to handle any necessary cleanup
        context.signal_map = {signal.SIGHUP : shutdown_handler}

        context.open()

        # Start sspl-ll as a main process running multiple threads
        with context:
            main(conf_reader)

    except (Exception, StandardError) as err:
        logger.critical("While spawning sspl-ll process :%r" % err)
        sys.exit(os.EX_USAGE)

    print "SSPL-LL Process started successfully"
    sys.exit(os.EX_OK)
