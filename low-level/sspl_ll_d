#!/usr/bin/python2.7

"""
 ****************************************************************************
 Filename:          sspl_ll_d
 Description:       Entry point for the sspl-ll daemon service
 Creation Date:     01/14/2015
 Author:            Jake Abernathy

 Do NOT modify or remove this copyright and confidentiality notice!
 Copyright (c) 2001 - $Date: 2015/01/14 $ Seagate Technology, LLC.
 The code contained herein is CONFIDENTIAL to Seagate Technology, LLC.
 Portions are also trade secret. Any use, duplication, derivation, distribution
 or disclosure of this code, for any reason, not expressly authorized is
 prohibited. All other rights are expressly reserved by Seagate Technology, LLC.

 ****************************************************************************
 All relevant license information (GPL, FreeBSD, etc)
 ****************************************************************************
"""

import logging
import daemon
import signal
import getopt
import Queue
import sys
import os

from threading import Thread

from utils.config_reader import ConfigReader
from utils.service_logging import init_logging
from utils.service_logging import logger

# Import modules which will be will be available to sspl-ll
from modules.drive_manager_monitor import DriveManagerMonitor 

# Module for handling RabbitMQ messages
from rabbitmq.rabbitmq_processor import RabbitMQprocessor 


# This is the list of running threaded modules.  It is global for those rare
#  occasions when cross-threaded access is needed which must be implemented
#  in thread-safe fashion.  Avoid if possible but here if needed.
sspl_modules = []

# Section and key in config file for bootstrap
SSPL_SETTING  = 'SSPL-LL_SETTING'    
LOGGING_LEVEL = 'logging_level'  
MODULES       = 'modules'


def main(conf_reader):
    """The main bootstrap for sspl"""
    
    logger.info("sspl-ll Bootstrap: Obtaining list of modules from config file")    
    conf_modules = conf_reader._get_value_list(SSPL_SETTING,
                                                MODULES)
    logger.info("sspl-ll Bootstrap: Modules to load: %s" % conf_modules)
    
    # Use reflection to instantiate the class based upon its name in config file
    for conf_thread in conf_modules:
        klass = globals()[conf_thread]

        global sspl_modules
        sspl_modules.append (klass())    
    
    # Message queue used to notify RabbitMQproccessor to send messages
    rabbitMsgQ = Queue.Queue()
    
    try:
        logger.info("sspl-ll Bootstrap: Starting modules on threads")
        
        threads = []        
        for thread in sspl_modules:
            logger.info("sspl-ll Bootstrap: Starting module %s" % thread.name())     
            thread = Thread(target=_run_thread_capture_errors,
                            args=(thread, sspl_modules, rabbitMsgQ, conf_reader))
            thread.start()
            threads.append(thread)
     
        # Wait for all threads to exit
        for thread in threads:
            thread.join()        
               
        return
        
    except Exception as ex:
        logger.exception(ex)


def _run_thread_capture_errors(current_thread, sspl_modules, rabbitMsgQ, conf_reader):
    """Run the given thread and log any errors that happen on it.
    Will stop all sspl_modules if one of them fails."""
    try:
        # Each thread is handed a ref to rabbitMsgQ so it can transmit messages as desired
        current_thread.initialize(rabbitMsgQ, conf_reader)
        current_thread.start()

    except BaseException as ex:
        logger.critical("sspl-ll encountered an error, terminating service Error: %s" % ex)
        logger.exception()
        for other_thread in sspl_processes:
            if other_thread is not current_thread:
                other_thread.shutdown()


def shutdown_handler(a=None, b=None):
    """Handler called when shutting down"""
    logger.info("sspl-ll is shutting down")    
    for thread in sspl_modules:
        thread.shutdown()

def print_usage():
    """Display the syntax usage for this script"""
    print """sspl_ll_d -c <path_to_conf_file>
    -h:    Display this help
    -c:    Configuration settings for sspl_ll_d service"""


if __name__ == "__main__":

    # Retrieve configuration file for sspl-ll service
    try:
        opts = getopt.getopt(sys.argv[1:], "hc:", ["help", "config="])
    
    except getopt.GetoptError as err:
        print_usage()
        sys.exit(os.EX_USAGE)
    
    if len(opts[0]) < 1:
        print_usage()
        sys.exit(os.EX_USAGE)
        
    for opt, arg in opts[0]:
        if opt == "-c" or opt == "--config":
            path_to_conf_file = arg
        else:
            print_usage()
            sys.exit(os.EX_USAGE)

    # Validate configuration file for required valid values
    try:
        conf_reader = ConfigReader(path_to_conf_file)
        conf_reader.validate_config_file()
        
    except (IOError, ConfigReader.Error) as err:
        # We don't have logger yet, need to find log_level from conf file first
        print "[ Error ] when validating the configuration file %s :" % \
            path_to_conf_file
        print err
        print "Exiting ..."
        exit(os.EX_USAGE)
        
    # Initialize logging
    try:
        logging_level = conf_reader._get_value_with_default(SSPL_SETTING,
                                                            LOGGING_LEVEL,
                                                            "INFO")
        init_logging(logging_level)

    except Exception as err:
        # We don't have logger since it threw an exception, use generic 'print'
        print "[ Error ] when initializing logging :"
        print err
        print "Exiting ..."
        exit(os.EX_USAGE)
    
    try:    
        # Configure a shutdown handler to handle any necessary cleanup
        signal_map = {signal.SIGTERM: shutdown_handler}
        
        # Start sspl-ll as a main process running multiple threads    
        with daemon.DaemonContext(signal_map=signal_map):
            main(conf_reader)
            
    except (Exception, StandardError) as err:
        logger.critical("While spawning sspl-ll process :%s" % err)
        logger.exception()
        sys.exit(os.EX_USAGE)
        
    print "SSPL-LL Process started successfully"
    sys.exit(os.EX_OK)
