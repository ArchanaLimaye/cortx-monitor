#!/bin/sh
#
# ocf:pacemaker:Stateful resource agent
#
# Copyright 2006-2019 the Pacemaker project contributors
#
# The version control history for this file may have further details.
#
# This source code is licensed under the GNU General Public License version 2
# or later (GPLv2+) WITHOUT ANY WARRANTY.
#
#
# Example of a stateful OCF Resource Agent
#
#######################################################################
# Initialization:
: ${OCF_FUNCTIONS:="${OCF_ROOT}/resource.d/heartbeat/.ocf-shellfuncs"}
. "${OCF_FUNCTIONS}"
: ${__OCF_ACTION:="$1"}
#######################################################################
meta_data() {
    cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="SSPL Stateful" version="1.1">
<version>1.0</version>
<longdesc lang="en">
This is a stateful resource agent that implements two states
</longdesc>
<shortdesc lang="en">SSPL stateful resource agent</shortdesc>
<parameters>
<parameter name="state" unique="1">
<longdesc lang="en">
Location to store the resource state in
</longdesc>
<shortdesc lang="en">State file</shortdesc>
<content type="string" default="${HA_VARRUN%%/}/Stateful-${OCF_RESOURCE_INSTANCE}.state" />
</parameter>
<parameter name="sspl_state_file" unique="1">
<longdesc lang="en">
Location to store the sspl mode. [ Active, Degraded ]
</longdesc>
<shortdesc lang="en">SSPL state file</shortdesc>
<content type="string" default="/var/sspl/data/state.txt" />
</parameter>
</parameters>
<actions>
<action name="start"   timeout="20s" interval="10s"/>
<action name="stop"    timeout="20s" interval="10s"/>
<action name="monitor" timeout="20s" interval="10s" role="Master"/>
<action name="monitor" timeout="20s" interval="11s" role="Slave"/>
<action name="promote" timeout="10s" />
<action name="demote"  timeout="10s" />
<action name="meta-data"  timeout="5s" />
<action name="validate-all"  timeout="30s" />
</actions>
</resource-agent>
END
    exit $OCF_SUCCESS
}
#######################################################################
stateful_usage() {
    cat <<END
usage: $0 {start|stop|promote|demote|monitor|validate-all|meta-data}
Expects to have a fully populated OCF RA-compliant environment set.
END
    exit $1
}
stateful_update() {
    echo $1 > "${OCF_RESKEY_state}"
}
stateful_check_state() {
    target="$1"
    if [ -f "${OCF_RESKEY_state}" ]; then
        state=$(cat "${OCF_RESKEY_state}")
        if [ "$target" = "$state" ]; then
            return 0
        fi
    else
        if [ -z "$target" ]; then
            return 0
        fi
    fi
    return 1
}
set_master_score() {
    "${HA_SBIN_DIR}/crm_master" -l reboot -v "$1"
}
stateful_start() {
    stateful_check_state master
    if [ $? -eq 0 ]; then
        # CRM Error - Should never happen
        systemctl start sspl-ll
        while sspl_monitor != $OCF_MASTER_RUNNING;
        do
            sleep 1
        done
        return $OCF_RUNNING_MASTER
    fi
    stateful_update slave
    set_master_score "${slave_score}"
    systemctl start sspl-ll
    while sspl_monitor != "$OCF_SUCCESS";
    do
        sleep 1
    done
    return $OCF_SUCCESS
}
stateful_demote() {
    stateful_check_state
    if [ $? -eq 0 ]; then
        # CRM Error - Should never happen
        return $OCF_NOT_RUNNING
    fi
    stateful_update slave
    set_master_score "${slave_score}"
    sspl_monitor
    if [ $? -eq "{$OCF_FAILED_MASTER}" ]; then
        stateful_update slave
        set_master_score "${slave_score}"
        return $OCF_FAILED_MASTER
    fi
    if [ -z $OCF_RESKEY_sspl_mode ]; then
        OCF_RESKEY_sspl_mode="/var/sspl/data/state.txt"
    fi
    [ -f $OCF_RESKEY_sspl_mode ] && {
        echo "state=degrade" > /var/sspl/data/state.txt
        sspl_pid=`systemctl status sspl-ll | grep PID | awk '{print $3}'`
        usr/bin/kill -s SIGHUP $sspl_pid
    }
    return 0
}
stateful_promote() {
    stateful_check_state
    if [ $? -eq 0 ]; then
        return $OCF_NOT_RUNNING
    fi
    stateful_update master
    set_master_score "${master_score}"

    if [ -z $OCF_RESKEY_sspl_mode ]; then
        OCF_RESKEY_sspl_mode="/var/sspl/data/state.txt"
    fi
    [ -f $OCF_RESKEY_sspl_mode ] && {
        echo "state=active" > /var/sspl/data/state.txt
        sspl_pid=`systemctl status sspl-ll | grep PID | awk '{print $3}'`
        /usr/bin/kill -s SIGHUP $sspl_pid
    }
    return 0
}
stateful_stop() {
    "${HA_SBIN_DIR}/crm_master" -l reboot -D
    stateful_check_state master
    if [ $? -eq 0 ]; then
        # CRM Error - Should never happen
        return $OCF_RUNNING_MASTER
    fi
    systemctl stop sspl-ll
    return 0
}
stateful_monitor() {
    stateful_check_state "master"
    if [ $? -eq 0 ]; then
        # Restore the master setting during probes
        set_master_score "${master_score}"
        systemctl status sspl-ll | grep "Active: failed"
        if [ $? -eq 0 ]; then
            return $OCF_FAILED_MASTER
        fi
        systemctl status sspl-ll
        if [ $? -eq 0 ]; then
            return $OCF_RUNNING_MASTER
        else
            return $OCF_ERR_GENERIC
        fi
    fi

    stateful_check_state "slave"
    if [ $? -eq 0 ]; then
        # Restore the master setting during probes
        set_master_score "${slave_score}"
        systemctl status sspl-ll | grep "Active: failed"
        if [ $? -eq 0 ]; then
            var=`date`
            return $OCF_ERR_GENERIC
        fi
        systemctl status sspl-ll
        if [ $? -eq 0 ]; then
            return $OCF_SUCCESS
        else
            return $OCF_NOT_RUNNING
        fi
    fi
}

stateful_validate() {
    exit $OCF_SUCCESS
}

: ${slave_score:=5}
: ${master_score:=10}
: ${OCF_RESKEY_CRM_meta_globally_unique:="false"}
if [ -z "$OCF_RESKEY_state" ]; then
    if [ "${OCF_RESKEY_CRM_meta_globally_unique}" = "false" ]; then
        state="${HA_VARRUN%%/}/Stateful-${OCF_RESOURCE_INSTANCE}.state"
        # Strip off the trailing clone marker
        OCF_RESKEY_state=$(echo $state | sed s/:[0-9][0-9]*\.state/.state/)
    else
        OCF_RESKEY_state="${HA_VARRUN%%/}/Stateful-${OCF_RESOURCE_INSTANCE}.state"
    fi
fi
case "$__OCF_ACTION" in
meta-data)      meta_data;;
start)          stateful_start;;
promote)        stateful_promote;;
demote)         stateful_demote;;
stop)           stateful_stop;;
monitor)        stateful_monitor;;
validate-all)   stateful_validate;;
usage|help)     stateful_usage $OCF_SUCCESS;;
*)              stateful_usage $OCF_ERR_UNIMPLEMENTED;;
esac
exit $?
